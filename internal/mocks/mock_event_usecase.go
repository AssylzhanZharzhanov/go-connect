// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AssylzhanZharzhanov/connect/internal/event/domain (interfaces: EventUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/AssylzhanZharzhanov/connect/internal/event/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEventUseCase is a mock of EventUseCase interface.
type MockEventUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUseCaseMockRecorder
}

// MockEventUseCaseMockRecorder is the mock recorder for MockEventUseCase.
type MockEventUseCaseMockRecorder struct {
	mock *MockEventUseCase
}

// NewMockEventUseCase creates a new mock instance.
func NewMockEventUseCase(ctrl *gomock.Controller) *MockEventUseCase {
	mock := &MockEventUseCase{ctrl: ctrl}
	mock.recorder = &MockEventUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUseCase) EXPECT() *MockEventUseCaseMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventUseCase) CreateEvent(arg0 domain.CreateEventRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventUseCaseMockRecorder) CreateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventUseCase)(nil).CreateEvent), arg0)
}

// DeleteEvent mocks base method.
func (m *MockEventUseCase) DeleteEvent(arg0 domain.EventID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventUseCaseMockRecorder) DeleteEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventUseCase)(nil).DeleteEvent), arg0)
}

// GetEvent mocks base method.
func (m *MockEventUseCase) GetEvent(arg0 domain.EventID) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventUseCaseMockRecorder) GetEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventUseCase)(nil).GetEvent), arg0)
}

// GetEvents mocks base method.
func (m *MockEventUseCase) GetEvents() ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventUseCaseMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventUseCase)(nil).GetEvents))
}

// UpdateEvent mocks base method.
func (m *MockEventUseCase) UpdateEvent(arg0 domain.EventID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventUseCaseMockRecorder) UpdateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventUseCase)(nil).UpdateEvent), arg0)
}
